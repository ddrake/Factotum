//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Factotum {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StatusReportDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StatusReportDataSet : global::System.Data.DataSet {
        
        private TmpStatusReportDataTable tableTmpStatusReport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StatusReportDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StatusReportDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TmpStatusReport"] != null)) {
                    base.Tables.Add(new TmpStatusReportDataTable(ds.Tables["TmpStatusReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TmpStatusReportDataTable TmpStatusReport {
            get {
                return this.tableTmpStatusReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StatusReportDataSet cln = ((StatusReportDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TmpStatusReport"] != null)) {
                    base.Tables.Add(new TmpStatusReportDataTable(ds.Tables["TmpStatusReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTmpStatusReport = ((TmpStatusReportDataTable)(base.Tables["TmpStatusReport"]));
            if ((initTable == true)) {
                if ((this.tableTmpStatusReport != null)) {
                    this.tableTmpStatusReport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StatusReportDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StatusReportDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTmpStatusReport = new TmpStatusReportDataTable();
            base.Tables.Add(this.tableTmpStatusReport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTmpStatusReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StatusReportDataSet ds = new StatusReportDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TmpStatusReportRowChangeEventHandler(object sender, TmpStatusReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TmpStatusReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnIscName;
            
            private global::System.Data.DataColumn columnCmpName;
            
            private global::System.Data.DataColumn columnIscIsReadyToInspect;
            
            private global::System.Data.DataColumn columnIscInsID;
            
            private global::System.Data.DataColumn columnIscOtgID;
            
            private global::System.Data.DataColumn columnIscMinCount;
            
            private global::System.Data.DataColumn columnIscIsFinal;
            
            private global::System.Data.DataColumn columnIscIsUtFieldComplete;
            
            private global::System.Data.DataColumn columnIscReportSubmittedOn;
            
            private global::System.Data.DataColumn columnIscCompletionReportedOn;
            
            private global::System.Data.DataColumn columnIscWorkOrder;
            
            private global::System.Data.DataColumn columnIscEdsNumber;
            
            private global::System.Data.DataColumn columnTotalCrewDose;
            
            private global::System.Data.DataColumn columnTotalPersonHours;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpStatusReportDataTable() {
                this.TableName = "TmpStatusReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TmpStatusReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TmpStatusReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscNameColumn {
                get {
                    return this.columnIscName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmpNameColumn {
                get {
                    return this.columnCmpName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscIsReadyToInspectColumn {
                get {
                    return this.columnIscIsReadyToInspect;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscInsIDColumn {
                get {
                    return this.columnIscInsID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscOtgIDColumn {
                get {
                    return this.columnIscOtgID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscMinCountColumn {
                get {
                    return this.columnIscMinCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscIsFinalColumn {
                get {
                    return this.columnIscIsFinal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscIsUtFieldCompleteColumn {
                get {
                    return this.columnIscIsUtFieldComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscReportSubmittedOnColumn {
                get {
                    return this.columnIscReportSubmittedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscCompletionReportedOnColumn {
                get {
                    return this.columnIscCompletionReportedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscWorkOrderColumn {
                get {
                    return this.columnIscWorkOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IscEdsNumberColumn {
                get {
                    return this.columnIscEdsNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCrewDoseColumn {
                get {
                    return this.columnTotalCrewDose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPersonHoursColumn {
                get {
                    return this.columnTotalPersonHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpStatusReportRow this[int index] {
                get {
                    return ((TmpStatusReportRow)(this.Rows[index]));
                }
            }
            
            public event TmpStatusReportRowChangeEventHandler TmpStatusReportRowChanging;
            
            public event TmpStatusReportRowChangeEventHandler TmpStatusReportRowChanged;
            
            public event TmpStatusReportRowChangeEventHandler TmpStatusReportRowDeleting;
            
            public event TmpStatusReportRowChangeEventHandler TmpStatusReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTmpStatusReportRow(TmpStatusReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpStatusReportRow AddTmpStatusReportRow(string IscName, string CmpName, bool IscIsReadyToInspect, System.Guid IscInsID, System.Guid IscOtgID, short IscMinCount, bool IscIsFinal, bool IscIsUtFieldComplete, System.DateTime IscReportSubmittedOn, System.DateTime IscCompletionReportedOn, string IscWorkOrder, int IscEdsNumber, double TotalCrewDose, double TotalPersonHours) {
                TmpStatusReportRow rowTmpStatusReportRow = ((TmpStatusReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IscName,
                        CmpName,
                        IscIsReadyToInspect,
                        IscInsID,
                        IscOtgID,
                        IscMinCount,
                        IscIsFinal,
                        IscIsUtFieldComplete,
                        IscReportSubmittedOn,
                        IscCompletionReportedOn,
                        IscWorkOrder,
                        IscEdsNumber,
                        TotalCrewDose,
                        TotalPersonHours};
                rowTmpStatusReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTmpStatusReportRow);
                return rowTmpStatusReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TmpStatusReportDataTable cln = ((TmpStatusReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TmpStatusReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIscName = base.Columns["IscName"];
                this.columnCmpName = base.Columns["CmpName"];
                this.columnIscIsReadyToInspect = base.Columns["IscIsReadyToInspect"];
                this.columnIscInsID = base.Columns["IscInsID"];
                this.columnIscOtgID = base.Columns["IscOtgID"];
                this.columnIscMinCount = base.Columns["IscMinCount"];
                this.columnIscIsFinal = base.Columns["IscIsFinal"];
                this.columnIscIsUtFieldComplete = base.Columns["IscIsUtFieldComplete"];
                this.columnIscReportSubmittedOn = base.Columns["IscReportSubmittedOn"];
                this.columnIscCompletionReportedOn = base.Columns["IscCompletionReportedOn"];
                this.columnIscWorkOrder = base.Columns["IscWorkOrder"];
                this.columnIscEdsNumber = base.Columns["IscEdsNumber"];
                this.columnTotalCrewDose = base.Columns["TotalCrewDose"];
                this.columnTotalPersonHours = base.Columns["TotalPersonHours"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIscName = new global::System.Data.DataColumn("IscName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscName);
                this.columnCmpName = new global::System.Data.DataColumn("CmpName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmpName);
                this.columnIscIsReadyToInspect = new global::System.Data.DataColumn("IscIsReadyToInspect", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscIsReadyToInspect);
                this.columnIscInsID = new global::System.Data.DataColumn("IscInsID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscInsID);
                this.columnIscOtgID = new global::System.Data.DataColumn("IscOtgID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscOtgID);
                this.columnIscMinCount = new global::System.Data.DataColumn("IscMinCount", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscMinCount);
                this.columnIscIsFinal = new global::System.Data.DataColumn("IscIsFinal", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscIsFinal);
                this.columnIscIsUtFieldComplete = new global::System.Data.DataColumn("IscIsUtFieldComplete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscIsUtFieldComplete);
                this.columnIscReportSubmittedOn = new global::System.Data.DataColumn("IscReportSubmittedOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscReportSubmittedOn);
                this.columnIscCompletionReportedOn = new global::System.Data.DataColumn("IscCompletionReportedOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscCompletionReportedOn);
                this.columnIscWorkOrder = new global::System.Data.DataColumn("IscWorkOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscWorkOrder);
                this.columnIscEdsNumber = new global::System.Data.DataColumn("IscEdsNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIscEdsNumber);
                this.columnTotalCrewDose = new global::System.Data.DataColumn("TotalCrewDose", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCrewDose);
                this.columnTotalPersonHours = new global::System.Data.DataColumn("TotalPersonHours", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPersonHours);
                this.columnIscName.MaxLength = 50;
                this.columnCmpName.MaxLength = 50;
                this.columnIscWorkOrder.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpStatusReportRow NewTmpStatusReportRow() {
                return ((TmpStatusReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TmpStatusReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TmpStatusReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TmpStatusReportRowChanged != null)) {
                    this.TmpStatusReportRowChanged(this, new TmpStatusReportRowChangeEvent(((TmpStatusReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TmpStatusReportRowChanging != null)) {
                    this.TmpStatusReportRowChanging(this, new TmpStatusReportRowChangeEvent(((TmpStatusReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TmpStatusReportRowDeleted != null)) {
                    this.TmpStatusReportRowDeleted(this, new TmpStatusReportRowChangeEvent(((TmpStatusReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TmpStatusReportRowDeleting != null)) {
                    this.TmpStatusReportRowDeleting(this, new TmpStatusReportRowChangeEvent(((TmpStatusReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTmpStatusReportRow(TmpStatusReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StatusReportDataSet ds = new StatusReportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TmpStatusReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TmpStatusReportRow : global::System.Data.DataRow {
            
            private TmpStatusReportDataTable tableTmpStatusReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TmpStatusReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTmpStatusReport = ((TmpStatusReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IscName {
                get {
                    try {
                        return ((string)(this[this.tableTmpStatusReport.IscNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscName\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CmpName {
                get {
                    try {
                        return ((string)(this[this.tableTmpStatusReport.CmpNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmpName\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.CmpNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscIsReadyToInspect {
                get {
                    try {
                        return ((bool)(this[this.tableTmpStatusReport.IscIsReadyToInspectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscIsReadyToInspect\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscIsReadyToInspectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IscInsID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableTmpStatusReport.IscInsIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscInsID\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscInsIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IscOtgID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableTmpStatusReport.IscOtgIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscOtgID\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscOtgIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IscMinCount {
                get {
                    try {
                        return ((short)(this[this.tableTmpStatusReport.IscMinCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscMinCount\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscMinCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscIsFinal {
                get {
                    try {
                        return ((bool)(this[this.tableTmpStatusReport.IscIsFinalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscIsFinal\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscIsFinalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscIsUtFieldComplete {
                get {
                    try {
                        return ((bool)(this[this.tableTmpStatusReport.IscIsUtFieldCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscIsUtFieldComplete\' in table \'TmpStatusReport\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscIsUtFieldCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime IscReportSubmittedOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTmpStatusReport.IscReportSubmittedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscReportSubmittedOn\' in table \'TmpStatusReport\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscReportSubmittedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime IscCompletionReportedOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTmpStatusReport.IscCompletionReportedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscCompletionReportedOn\' in table \'TmpStatusReport\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscCompletionReportedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IscWorkOrder {
                get {
                    try {
                        return ((string)(this[this.tableTmpStatusReport.IscWorkOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscWorkOrder\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscWorkOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IscEdsNumber {
                get {
                    try {
                        return ((int)(this[this.tableTmpStatusReport.IscEdsNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IscEdsNumber\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.IscEdsNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalCrewDose {
                get {
                    try {
                        return ((double)(this[this.tableTmpStatusReport.TotalCrewDoseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCrewDose\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.TotalCrewDoseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalPersonHours {
                get {
                    try {
                        return ((double)(this[this.tableTmpStatusReport.TotalPersonHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPersonHours\' in table \'TmpStatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpStatusReport.TotalPersonHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscNameNull() {
                return this.IsNull(this.tableTmpStatusReport.IscNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscNameNull() {
                this[this.tableTmpStatusReport.IscNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmpNameNull() {
                return this.IsNull(this.tableTmpStatusReport.CmpNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmpNameNull() {
                this[this.tableTmpStatusReport.CmpNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscIsReadyToInspectNull() {
                return this.IsNull(this.tableTmpStatusReport.IscIsReadyToInspectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscIsReadyToInspectNull() {
                this[this.tableTmpStatusReport.IscIsReadyToInspectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscInsIDNull() {
                return this.IsNull(this.tableTmpStatusReport.IscInsIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscInsIDNull() {
                this[this.tableTmpStatusReport.IscInsIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscOtgIDNull() {
                return this.IsNull(this.tableTmpStatusReport.IscOtgIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscOtgIDNull() {
                this[this.tableTmpStatusReport.IscOtgIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscMinCountNull() {
                return this.IsNull(this.tableTmpStatusReport.IscMinCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscMinCountNull() {
                this[this.tableTmpStatusReport.IscMinCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscIsFinalNull() {
                return this.IsNull(this.tableTmpStatusReport.IscIsFinalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscIsFinalNull() {
                this[this.tableTmpStatusReport.IscIsFinalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscIsUtFieldCompleteNull() {
                return this.IsNull(this.tableTmpStatusReport.IscIsUtFieldCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscIsUtFieldCompleteNull() {
                this[this.tableTmpStatusReport.IscIsUtFieldCompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscReportSubmittedOnNull() {
                return this.IsNull(this.tableTmpStatusReport.IscReportSubmittedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscReportSubmittedOnNull() {
                this[this.tableTmpStatusReport.IscReportSubmittedOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscCompletionReportedOnNull() {
                return this.IsNull(this.tableTmpStatusReport.IscCompletionReportedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscCompletionReportedOnNull() {
                this[this.tableTmpStatusReport.IscCompletionReportedOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscWorkOrderNull() {
                return this.IsNull(this.tableTmpStatusReport.IscWorkOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscWorkOrderNull() {
                this[this.tableTmpStatusReport.IscWorkOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIscEdsNumberNull() {
                return this.IsNull(this.tableTmpStatusReport.IscEdsNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIscEdsNumberNull() {
                this[this.tableTmpStatusReport.IscEdsNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCrewDoseNull() {
                return this.IsNull(this.tableTmpStatusReport.TotalCrewDoseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCrewDoseNull() {
                this[this.tableTmpStatusReport.TotalCrewDoseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPersonHoursNull() {
                return this.IsNull(this.tableTmpStatusReport.TotalPersonHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPersonHoursNull() {
                this[this.tableTmpStatusReport.TotalPersonHoursColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TmpStatusReportRowChangeEvent : global::System.EventArgs {
            
            private TmpStatusReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpStatusReportRowChangeEvent(TmpStatusReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpStatusReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Factotum.StatusReportDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TmpStatusReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TmpStatusReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TmpStatusReport";
            tableMapping.ColumnMappings.Add("IscName", "IscName");
            tableMapping.ColumnMappings.Add("CmpName", "CmpName");
            tableMapping.ColumnMappings.Add("IscIsReadyToInspect", "IscIsReadyToInspect");
            tableMapping.ColumnMappings.Add("IscInsID", "IscInsID");
            tableMapping.ColumnMappings.Add("IscOtgID", "IscOtgID");
            tableMapping.ColumnMappings.Add("IscMinCount", "IscMinCount");
            tableMapping.ColumnMappings.Add("IscIsFinal", "IscIsFinal");
            tableMapping.ColumnMappings.Add("IscIsUtFieldComplete", "IscIsUtFieldComplete");
            tableMapping.ColumnMappings.Add("IscReportSubmittedOn", "IscReportSubmittedOn");
            tableMapping.ColumnMappings.Add("IscCompletionReportedOn", "IscCompletionReportedOn");
            tableMapping.ColumnMappings.Add("IscWorkOrder", "IscWorkOrder");
            tableMapping.ColumnMappings.Add("IscEdsNumber", "IscEdsNumber");
            tableMapping.ColumnMappings.Add("TotalCrewDose", "TotalCrewDose");
            tableMapping.ColumnMappings.Add("TotalPersonHours", "TotalPersonHours");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TmpStatusReport] ([IscName], [CmpName], [IscIsReadyToInspect], [IscInsID], [IscOtgID], [IscMinCount], [IscIsFinal], [IscIsUtFieldComplete], [IscReportSubmittedOn], [IscCompletionReportedOn], [IscWorkOrder], [IscEdsNumber], [TotalCrewDose], [TotalPersonHours]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlServerCe.SqlCeParameter param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.IsNullable = true;
            param.SourceColumn = "IscName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.IsNullable = true;
            param.SourceColumn = "CmpName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IscIsReadyToInspect";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.DbType = global::System.Data.DbType.Guid;
            param.IsNullable = true;
            param.SourceColumn = "IscInsID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.DbType = global::System.Data.DbType.Guid;
            param.IsNullable = true;
            param.SourceColumn = "IscOtgID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.DbType = global::System.Data.DbType.Int16;
            param.IsNullable = true;
            param.SourceColumn = "IscMinCount";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p7";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IscIsFinal";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p8";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IscIsUtFieldComplete";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p9";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "IscReportSubmittedOn";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p10";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "IscCompletionReportedOn";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p11";
            param.IsNullable = true;
            param.SourceColumn = "IscWorkOrder";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p12";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "IscEdsNumber";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p13";
            param.DbType = global::System.Data.DbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "TotalCrewDose";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p14";
            param.DbType = global::System.Data.DbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "TotalPersonHours";
            this._adapter.InsertCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::Factotum.Properties.Settings.Default.FactotumConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [IscName], [CmpName], [IscIsReadyToInspect], [IscInsID], [IscOtgID], [IscMinCount], [IscIsFinal], [IscIsUtFieldComplete], [IscReportSubmittedOn], [IscCompletionReportedOn], [IscWorkOrder], [IscEdsNumber], [TotalCrewDose], [TotalPersonHours] FROM [TmpStatusReport]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StatusReportDataSet.TmpStatusReportDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StatusReportDataSet.TmpStatusReportDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StatusReportDataSet.TmpStatusReportDataTable dataTable = new StatusReportDataSet.TmpStatusReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StatusReportDataSet.TmpStatusReportDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StatusReportDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TmpStatusReport");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, global::System.Nullable<bool> p3, global::System.Nullable<global::System.Guid> p4, global::System.Nullable<global::System.Guid> p5, global::System.Nullable<short> p6, global::System.Nullable<bool> p7, global::System.Nullable<bool> p8, global::System.Nullable<global::System.DateTime> p9, global::System.Nullable<global::System.DateTime> p10, string p11, global::System.Nullable<int> p12, global::System.Nullable<double> p13, global::System.Nullable<double> p14) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.Guid)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.Guid)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((short)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(p7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(p8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(p10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((p11 == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(p11));
            }
            if ((p12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(p12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((p13.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(p13.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((p14.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(p14.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591