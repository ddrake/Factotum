//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Factotum {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ComponentListingDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ComponentListingDataSet : global::System.Data.DataSet {
        
        private TmpComponentListingDataTable tableTmpComponentListing;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ComponentListingDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ComponentListingDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TmpComponentListing"] != null)) {
                    base.Tables.Add(new TmpComponentListingDataTable(ds.Tables["TmpComponentListing"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TmpComponentListingDataTable TmpComponentListing {
            get {
                return this.tableTmpComponentListing;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ComponentListingDataSet cln = ((ComponentListingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TmpComponentListing"] != null)) {
                    base.Tables.Add(new TmpComponentListingDataTable(ds.Tables["TmpComponentListing"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTmpComponentListing = ((TmpComponentListingDataTable)(base.Tables["TmpComponentListing"]));
            if ((initTable == true)) {
                if ((this.tableTmpComponentListing != null)) {
                    this.tableTmpComponentListing.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ComponentListingDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ComponentListingDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTmpComponentListing = new TmpComponentListingDataTable();
            base.Tables.Add(this.tableTmpComponentListing);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTmpComponentListing() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ComponentListingDataSet ds = new ComponentListingDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TmpComponentListingRowChangeEventHandler(object sender, TmpComponentListingRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TmpComponentListingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCmpName;
            
            private global::System.Data.DataColumn columnCtpName;
            
            private global::System.Data.DataColumn columnCmtName;
            
            private global::System.Data.DataColumn columnLinName;
            
            private global::System.Data.DataColumn columnSysName;
            
            private global::System.Data.DataColumn columnPslSchedule;
            
            private global::System.Data.DataColumn columnPslNomDia;
            
            private global::System.Data.DataColumn columnCmpTimesInspected;
            
            private global::System.Data.DataColumn columnCmpAvgInspectionTime;
            
            private global::System.Data.DataColumn columnCmpAvgCrewDose;
            
            private global::System.Data.DataColumn columnCmpHighRad;
            
            private global::System.Data.DataColumn columnCmpHardToAccess;
            
            private global::System.Data.DataColumn columnCmpNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpComponentListingDataTable() {
                this.TableName = "TmpComponentListing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TmpComponentListingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TmpComponentListingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmpNameColumn {
                get {
                    return this.columnCmpName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CtpNameColumn {
                get {
                    return this.columnCtpName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmtNameColumn {
                get {
                    return this.columnCmtName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinNameColumn {
                get {
                    return this.columnLinName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SysNameColumn {
                get {
                    return this.columnSysName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PslScheduleColumn {
                get {
                    return this.columnPslSchedule;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PslNomDiaColumn {
                get {
                    return this.columnPslNomDia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmpTimesInspectedColumn {
                get {
                    return this.columnCmpTimesInspected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmpAvgInspectionTimeColumn {
                get {
                    return this.columnCmpAvgInspectionTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmpAvgCrewDoseColumn {
                get {
                    return this.columnCmpAvgCrewDose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmpHighRadColumn {
                get {
                    return this.columnCmpHighRad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmpHardToAccessColumn {
                get {
                    return this.columnCmpHardToAccess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmpNoteColumn {
                get {
                    return this.columnCmpNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpComponentListingRow this[int index] {
                get {
                    return ((TmpComponentListingRow)(this.Rows[index]));
                }
            }
            
            public event TmpComponentListingRowChangeEventHandler TmpComponentListingRowChanging;
            
            public event TmpComponentListingRowChangeEventHandler TmpComponentListingRowChanged;
            
            public event TmpComponentListingRowChangeEventHandler TmpComponentListingRowDeleting;
            
            public event TmpComponentListingRowChangeEventHandler TmpComponentListingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTmpComponentListingRow(TmpComponentListingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpComponentListingRow AddTmpComponentListingRow(string CmpName, string CtpName, string CmtName, string LinName, string SysName, string PslSchedule, decimal PslNomDia, int CmpTimesInspected, double CmpAvgInspectionTime, double CmpAvgCrewDose, bool CmpHighRad, bool CmpHardToAccess, string CmpNote) {
                TmpComponentListingRow rowTmpComponentListingRow = ((TmpComponentListingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CmpName,
                        CtpName,
                        CmtName,
                        LinName,
                        SysName,
                        PslSchedule,
                        PslNomDia,
                        CmpTimesInspected,
                        CmpAvgInspectionTime,
                        CmpAvgCrewDose,
                        CmpHighRad,
                        CmpHardToAccess,
                        CmpNote};
                rowTmpComponentListingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTmpComponentListingRow);
                return rowTmpComponentListingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TmpComponentListingDataTable cln = ((TmpComponentListingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TmpComponentListingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCmpName = base.Columns["CmpName"];
                this.columnCtpName = base.Columns["CtpName"];
                this.columnCmtName = base.Columns["CmtName"];
                this.columnLinName = base.Columns["LinName"];
                this.columnSysName = base.Columns["SysName"];
                this.columnPslSchedule = base.Columns["PslSchedule"];
                this.columnPslNomDia = base.Columns["PslNomDia"];
                this.columnCmpTimesInspected = base.Columns["CmpTimesInspected"];
                this.columnCmpAvgInspectionTime = base.Columns["CmpAvgInspectionTime"];
                this.columnCmpAvgCrewDose = base.Columns["CmpAvgCrewDose"];
                this.columnCmpHighRad = base.Columns["CmpHighRad"];
                this.columnCmpHardToAccess = base.Columns["CmpHardToAccess"];
                this.columnCmpNote = base.Columns["CmpNote"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCmpName = new global::System.Data.DataColumn("CmpName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmpName);
                this.columnCtpName = new global::System.Data.DataColumn("CtpName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCtpName);
                this.columnCmtName = new global::System.Data.DataColumn("CmtName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmtName);
                this.columnLinName = new global::System.Data.DataColumn("LinName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinName);
                this.columnSysName = new global::System.Data.DataColumn("SysName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSysName);
                this.columnPslSchedule = new global::System.Data.DataColumn("PslSchedule", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPslSchedule);
                this.columnPslNomDia = new global::System.Data.DataColumn("PslNomDia", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPslNomDia);
                this.columnCmpTimesInspected = new global::System.Data.DataColumn("CmpTimesInspected", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmpTimesInspected);
                this.columnCmpAvgInspectionTime = new global::System.Data.DataColumn("CmpAvgInspectionTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmpAvgInspectionTime);
                this.columnCmpAvgCrewDose = new global::System.Data.DataColumn("CmpAvgCrewDose", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmpAvgCrewDose);
                this.columnCmpHighRad = new global::System.Data.DataColumn("CmpHighRad", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmpHighRad);
                this.columnCmpHardToAccess = new global::System.Data.DataColumn("CmpHardToAccess", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmpHardToAccess);
                this.columnCmpNote = new global::System.Data.DataColumn("CmpNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmpNote);
                this.columnCmpName.MaxLength = 50;
                this.columnCtpName.MaxLength = 25;
                this.columnCmtName.MaxLength = 25;
                this.columnLinName.MaxLength = 40;
                this.columnSysName.MaxLength = 40;
                this.columnPslSchedule.MaxLength = 20;
                this.columnCmpNote.MaxLength = 256;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpComponentListingRow NewTmpComponentListingRow() {
                return ((TmpComponentListingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TmpComponentListingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TmpComponentListingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TmpComponentListingRowChanged != null)) {
                    this.TmpComponentListingRowChanged(this, new TmpComponentListingRowChangeEvent(((TmpComponentListingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TmpComponentListingRowChanging != null)) {
                    this.TmpComponentListingRowChanging(this, new TmpComponentListingRowChangeEvent(((TmpComponentListingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TmpComponentListingRowDeleted != null)) {
                    this.TmpComponentListingRowDeleted(this, new TmpComponentListingRowChangeEvent(((TmpComponentListingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TmpComponentListingRowDeleting != null)) {
                    this.TmpComponentListingRowDeleting(this, new TmpComponentListingRowChangeEvent(((TmpComponentListingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTmpComponentListingRow(TmpComponentListingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ComponentListingDataSet ds = new ComponentListingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TmpComponentListingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TmpComponentListingRow : global::System.Data.DataRow {
            
            private TmpComponentListingDataTable tableTmpComponentListing;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TmpComponentListingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTmpComponentListing = ((TmpComponentListingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CmpName {
                get {
                    try {
                        return ((string)(this[this.tableTmpComponentListing.CmpNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmpName\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.CmpNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CtpName {
                get {
                    try {
                        return ((string)(this[this.tableTmpComponentListing.CtpNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CtpName\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.CtpNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CmtName {
                get {
                    try {
                        return ((string)(this[this.tableTmpComponentListing.CmtNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmtName\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.CmtNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinName {
                get {
                    try {
                        return ((string)(this[this.tableTmpComponentListing.LinNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinName\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.LinNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SysName {
                get {
                    try {
                        return ((string)(this[this.tableTmpComponentListing.SysNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SysName\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.SysNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PslSchedule {
                get {
                    try {
                        return ((string)(this[this.tableTmpComponentListing.PslScheduleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PslSchedule\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.PslScheduleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PslNomDia {
                get {
                    try {
                        return ((decimal)(this[this.tableTmpComponentListing.PslNomDiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PslNomDia\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.PslNomDiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CmpTimesInspected {
                get {
                    try {
                        return ((int)(this[this.tableTmpComponentListing.CmpTimesInspectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmpTimesInspected\' in table \'TmpComponentListing\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.CmpTimesInspectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CmpAvgInspectionTime {
                get {
                    try {
                        return ((double)(this[this.tableTmpComponentListing.CmpAvgInspectionTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmpAvgInspectionTime\' in table \'TmpComponentListing\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.CmpAvgInspectionTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CmpAvgCrewDose {
                get {
                    try {
                        return ((double)(this[this.tableTmpComponentListing.CmpAvgCrewDoseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmpAvgCrewDose\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.CmpAvgCrewDoseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CmpHighRad {
                get {
                    try {
                        return ((bool)(this[this.tableTmpComponentListing.CmpHighRadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmpHighRad\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.CmpHighRadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CmpHardToAccess {
                get {
                    try {
                        return ((bool)(this[this.tableTmpComponentListing.CmpHardToAccessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmpHardToAccess\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.CmpHardToAccessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CmpNote {
                get {
                    try {
                        return ((string)(this[this.tableTmpComponentListing.CmpNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmpNote\' in table \'TmpComponentListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTmpComponentListing.CmpNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmpNameNull() {
                return this.IsNull(this.tableTmpComponentListing.CmpNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmpNameNull() {
                this[this.tableTmpComponentListing.CmpNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCtpNameNull() {
                return this.IsNull(this.tableTmpComponentListing.CtpNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCtpNameNull() {
                this[this.tableTmpComponentListing.CtpNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmtNameNull() {
                return this.IsNull(this.tableTmpComponentListing.CmtNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmtNameNull() {
                this[this.tableTmpComponentListing.CmtNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinNameNull() {
                return this.IsNull(this.tableTmpComponentListing.LinNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinNameNull() {
                this[this.tableTmpComponentListing.LinNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSysNameNull() {
                return this.IsNull(this.tableTmpComponentListing.SysNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSysNameNull() {
                this[this.tableTmpComponentListing.SysNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPslScheduleNull() {
                return this.IsNull(this.tableTmpComponentListing.PslScheduleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPslScheduleNull() {
                this[this.tableTmpComponentListing.PslScheduleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPslNomDiaNull() {
                return this.IsNull(this.tableTmpComponentListing.PslNomDiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPslNomDiaNull() {
                this[this.tableTmpComponentListing.PslNomDiaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmpTimesInspectedNull() {
                return this.IsNull(this.tableTmpComponentListing.CmpTimesInspectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmpTimesInspectedNull() {
                this[this.tableTmpComponentListing.CmpTimesInspectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmpAvgInspectionTimeNull() {
                return this.IsNull(this.tableTmpComponentListing.CmpAvgInspectionTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmpAvgInspectionTimeNull() {
                this[this.tableTmpComponentListing.CmpAvgInspectionTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmpAvgCrewDoseNull() {
                return this.IsNull(this.tableTmpComponentListing.CmpAvgCrewDoseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmpAvgCrewDoseNull() {
                this[this.tableTmpComponentListing.CmpAvgCrewDoseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmpHighRadNull() {
                return this.IsNull(this.tableTmpComponentListing.CmpHighRadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmpHighRadNull() {
                this[this.tableTmpComponentListing.CmpHighRadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmpHardToAccessNull() {
                return this.IsNull(this.tableTmpComponentListing.CmpHardToAccessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmpHardToAccessNull() {
                this[this.tableTmpComponentListing.CmpHardToAccessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmpNoteNull() {
                return this.IsNull(this.tableTmpComponentListing.CmpNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmpNoteNull() {
                this[this.tableTmpComponentListing.CmpNoteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TmpComponentListingRowChangeEvent : global::System.EventArgs {
            
            private TmpComponentListingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpComponentListingRowChangeEvent(TmpComponentListingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TmpComponentListingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Factotum.ComponentListingDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TmpComponentListingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TmpComponentListingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TmpComponentListing";
            tableMapping.ColumnMappings.Add("CmpName", "CmpName");
            tableMapping.ColumnMappings.Add("CtpName", "CtpName");
            tableMapping.ColumnMappings.Add("CmtName", "CmtName");
            tableMapping.ColumnMappings.Add("LinName", "LinName");
            tableMapping.ColumnMappings.Add("SysName", "SysName");
            tableMapping.ColumnMappings.Add("PslSchedule", "PslSchedule");
            tableMapping.ColumnMappings.Add("PslNomDia", "PslNomDia");
            tableMapping.ColumnMappings.Add("CmpTimesInspected", "CmpTimesInspected");
            tableMapping.ColumnMappings.Add("CmpAvgInspectionTime", "CmpAvgInspectionTime");
            tableMapping.ColumnMappings.Add("CmpAvgCrewDose", "CmpAvgCrewDose");
            tableMapping.ColumnMappings.Add("CmpHighRad", "CmpHighRad");
            tableMapping.ColumnMappings.Add("CmpHardToAccess", "CmpHardToAccess");
            tableMapping.ColumnMappings.Add("CmpNote", "CmpNote");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TmpComponentListing] ([CmpName], [CtpName], [CmtName], [LinName], [SysName], [PslSchedule], [PslNomDia], [CmpTimesInspected], [CmpAvgInspectionTime], [CmpAvgCrewDose], [CmpHighRad], [CmpHardToAccess], [CmpNote]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlServerCe.SqlCeParameter param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.IsNullable = true;
            param.SourceColumn = "CmpName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.IsNullable = true;
            param.SourceColumn = "CtpName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.IsNullable = true;
            param.SourceColumn = "CmtName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.IsNullable = true;
            param.SourceColumn = "LinName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.IsNullable = true;
            param.SourceColumn = "SysName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.IsNullable = true;
            param.SourceColumn = "PslSchedule";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p7";
            param.DbType = global::System.Data.DbType.Decimal;
            param.IsNullable = true;
            param.SourceColumn = "PslNomDia";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p8";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CmpTimesInspected";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p9";
            param.DbType = global::System.Data.DbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "CmpAvgInspectionTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p10";
            param.DbType = global::System.Data.DbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "CmpAvgCrewDose";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p11";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "CmpHighRad";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p12";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "CmpHardToAccess";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p13";
            param.IsNullable = true;
            param.SourceColumn = "CmpNote";
            this._adapter.InsertCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::Factotum.Properties.Settings.Default.FactotumConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [CmpName], [CtpName], [CmtName], [LinName], [SysName], [PslSchedule], [Psl" +
                "NomDia], [CmpTimesInspected], [CmpAvgInspectionTime], [CmpAvgCrewDose], [CmpHigh" +
                "Rad], [CmpHardToAccess], [CmpNote] FROM [TmpComponentListing]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ComponentListingDataSet.TmpComponentListingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ComponentListingDataSet.TmpComponentListingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ComponentListingDataSet.TmpComponentListingDataTable dataTable = new ComponentListingDataSet.TmpComponentListingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ComponentListingDataSet.TmpComponentListingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ComponentListingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TmpComponentListing");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, string p3, string p4, string p5, string p6, global::System.Nullable<decimal> p7, global::System.Nullable<int> p8, global::System.Nullable<double> p9, global::System.Nullable<double> p10, global::System.Nullable<bool> p11, global::System.Nullable<bool> p12, string p13) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(p7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(p8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(p10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((p11.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(p11.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((p12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(p12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((p13 == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(p13));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591